Declaration Change Documentation:

Constants

Where: parser.ssl ConstantDefinitions Rule block
How: Replaced ';' loop choice for accepting multiple
constant declaration with ',' Adds ';' check at default
loop choice for end of Constant definitions.
Why: PT Pascal allows multiple constant definition separated by
';' where as Qust multiple constant definition is ',' separated.
Qust also enforces ';' at the end of multiple constant definiton

Types

Where: parser.ssl TypesDefinitions, TypeBody, SimpleType Rule blocks
How: Removed loop choice block in TypesDefinition and replaced with 
single TypeBody declaration. Removed '..' choice block in TypeBody 
and add '[' choice for array range definition. Replaced '..' choice 
block with ':' in SimpleType for array range definition. 
Removed '( .. )' block in SimpleType.
Why: PT Pascal allows multiple type declaration separated by ';'.
Qust types can only be declared one at the time. Array declaration
in PT pascal has begin and end index, where as in Qust it is 
declared by size.

Let

Where: parser.ssl VariableDeclarations
How: Modified the entire VariableDeclarations Rule to handle mutable and immutable variable declarations and accept
multiple variable declarations (mutable or immutable) with or without type, expressions, initial values (appropriately). 
This was done by looping each part of the declarations and having condition (if statement) to handle the different cases. 
Why: These changes were necessary for the let variable declarations in Qust, as many characters have been added, removed or modified.
Especially, the many different ways to declare mutable or immutable variables in Qust. Many test cases were developed to test
this functionality. 

Test files:
    declaration_const_multi_fail.pt
        - This test checks to make sure multiple declarations no longer work with semicolons
        Expected Output: FAIL (Error is caught)
    declaration_const_multi_pass.pt
        - This test checks to make sure multiple declarations are working with commas
        Expected Output: PASS (Parses Successfully)
    declaration_const_pass.pt
        - This test checks if single const variable declaration works.
        Expected Output: PASS (Parses Successfully)
    declaration_let_array_w_intial_pass.pt
        - This test checks the let immutable variable declaration with array
        Expected Output: PASS (Parses Successfully)
    declaration_let_multi_mutable_pass.pt
        - This test checks the let mutable variable declaration with multiple declarations
        Expected Output: PASS (Parses Successfully)
    declaration_let_multi_mutable_w_init_pass.pt
        - This test checks the let mutable variable declaration with multiple declarations
        Expected Output: PASS (Parses Successfully)
    declaration_let_multi_mutable_w_type_initial_exp_pass.pt
        - This test checks the let mutable variable declaration with multiple declarations with type and initial value
        Expected Output: PASS (Parses Successfully) 
    declaration_let_multi_mutable_w_type_pass.pt
        - This test checks the let mutable variable declaration with multiple declarations with type
        Expected Output: PASS (Parses Successfully) 
    declaration_let_multi_mutables_w_type_initial_exp_pass.pt
        - This test checks the let mutable variable declaration with multiple declarations with type and initial value as an expression
        Expected Output: PASS (Parses Successfully) 
    declaration_let_multi_pass.pt
        - This test checks to make sure multiple declarations of immutable variables work
        Expected Output: PASS (Parses Successfully) 
    declaration_let_multi_w_inital_pass
        - This test checks to make sure multiple declarations of immutable variables work with initial values
        Expected Output: PASS (Parses Successfully)
    declaration_let_multi_w_type_initial_exp_pass.pt
        - This test checks to make sure multiple declarations of immutable variables work with initial values as expressions
        Expected Output: PASS (Parses Successfully)
    declaration_let_multi_w_type_initial_pass.pt
        - This test checks to make sure multiple declarations of immutable variables work with type and initial values
        Expected Output: PASS (Parses Successfully)
    declaration_let_mutable_array_w_initial_pass.pt
        - This test checks the let mutable variable declaration with array 
        Expected Output: PASS (Parses Successfully)
    declaration_let_mutable_pass.pt
        - This test checks a single let mutable variable declaration 
        Expected Output: PASS (Parses Successfully)
    declaration_let_mutable_w_init_pass.pt
        - This test checks a single let mutable variable declaration with inital value
        Expected Output: PASS (Parses Successfully)
    declaration_let_mutable_w_type_init_exp_pass.pt
        - This test checks a single let mutable variable declaration with inital value as expression
        Expected Output: PASS (Parses Successfully)
    declaration_let_mutable_w_type_init_pass.pt
        - This test checks a single let mutable variable declaration with type and inital value
        Expected Output: PASS (Parses Successfully)
    declaration_let_pass.pt
        - This test checks a single let immutable variable declaration
        Expected Output: PASS (Parses Successfully)
    declaration_let_w_init_pass.pt
        - This test checks a single let immutable variable declaration with initial value
        Expected Output: PASS (Parses Successfully)
    declaration_let_w_type_init_exp_pass.pt
        - This test checks a single let immutable variable declaration with type and initial value as expression
        Expected Output: PASS (Parses Successfully)
    declaration_let_w_type_init_pass.pt
        - This test checks a single let immutable variable declaration with type and initial value
        Expected Output: PASS (Parses Successfully)
    declaration_let_w_type_pass.pt
         - This test checks a single let immutable variable declaration with type
        Expected Output: PASS (Parses Successfully)
    declaration_type_pass.pt
        - This test checks a single let immutable variable declaration with type
        Expected Output: PASS (Parses Successfully)
    declaration_var_fail.pt
     - This test checks a single let immutable variable declaration using var, not longer works
        Expected Output: FAIL (Error is caught)
        
