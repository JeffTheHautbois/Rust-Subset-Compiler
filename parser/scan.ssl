% PT Scanner.ssl   Ver. 4.2
%
% Date:  30 Jun 1980
%       (Revised v4.2 - 18 Dec 2019)
%
% Author:  Alan Rosselet
%
% Abstract
%     The scanner breaks a PT source program up into syntax tokens.
%   It removes token separators - blanks, tabs, comments.  The
%   scanner detects these lexical errors:  unclosed comments,
%   unclosed literals, literals that cross a line boundary,
%   illegal characters and integers followed by identifiers with no
%   separator between them.

Input : 
        lLetter 
        firstCharClass = lLetter 
        lDigit
        lPlus           '+'
        lMinus          '-'
        lStar           '*'
        lColon          ':'
        lEquals         '='
        lDot            '.'
        lComma          ','
        lSemicolon      ';'
        lQuote		'"'	%Changed this to double quote synonym
	lQuestionMark	'?'	%Added this symbol identifier
	lSlash		'/'	%Added this symbol identifier
	lPercent	'%'	%Added this symbol identifier
	lAmpersand	'&'	%Added this symbol identifier
	lOrBar		'|'	%Added this symbol identifier
        lNot		'!'	%Added this symbol identifier
	lUnderscore	'_'	%Added this symbol identifier
	lBackslash
        lLeftAngle      '<'
        lRightAngle     '>'
        lLeftParen      '('
        lRightParen     ')'
        lLeftBracket    '['
        lRightBracket   ']'
        lLeftBrace      '{'
        lRightBrace     '}'
        lBlank
        lIllegal
        lNewLine
        lCarriageReturn
        lTab
        lNewPage 
        lEndFile
        lastCharClass = lEndFile;

Output :
        % Keyword tokens -
        %   Tokens pMod through pWhile are keywords which will be separated
        %   from user defined identifiers by the Screener.  This Scanner
        %   treats them all as identifiers
	% Old PT keywords removed: pDiv pOr pAnd pNot pThen pEnd pUntil pDo
	% pArray pProgram pVar pProcedure pBegin pCase pRepeat
	pMod		 % mod keyword remains
        firstKeywordToken = pMod % first keyword token updated to pMod
        pPub		 % pub keyword added
        pMain % main keyword added
        pLet		 % let keyword added
        pMut		 % mut keyword added
        pFn		 % fn keyword added
	pLoop		 % loop keyword added
	pBreak		 % break keyword added
	pMatch		 % match keyword added
        pElse
        pOf
        pFile
        pConst
        pType
        pIf
        pWhile
        lastKeywordToken = pWhile % last keyword token modifed to pWhile

        % Scanner tokens -
        %   These are the tokens actually recognized by the Scanner itself.

        % Compound tokens - 
        %   These will be sent to the parser with a value or index.
        pIdentifier 
        firstCompoundInputToken = pIdentifier
        pInteger
        pStringLiteral
        lastCompoundInputToken = pStringLiteral

        % Non-compound tokens - 
        %   These tokens simply represent themselves.
        pNewLine
        pEndFile
        pPlus
        pMinus
        pStar
        pColonEquals
        pDot
        pComma
        pSemicolon
        pColon
        pSlash
        pPercent 
        pOrBar 
        pNot 
        pUnderscore 
        pQuestionMark 
        pDoubleAmpersand 
        pDoubleOrBar 
        pEquals
        pDoubleEquals 
        pPlusEquals 
        pMinusEquals 
        pEqualGreater 
        pNotEqual
        pLess
        pLessEqual
        pGreaterEqual
        pGreater
        pLeftParen
        pRightParen
        pRightBrace 
        pLeftBrace 
        pLeftBracket
        pRightBracket
        lastSyntaxToken = pRightBracket;

Error :
        eIllegalChar = 5
        firstScanError = eIllegalChar
        eStringLiteralLine
        eStringLiteralEOF
        eCommentEOF
        eNoSeparator
        lastScanError = eNoSeparator;

mechanism Buffer :
    % Buffer saves the characters associated with the
    % compound tokens identifier, integer and literal.

    oBufferSave;
        % Save the character form of the last accepted lexical token.




rules

% Note that the order of choice alternatives
% may have a significant effect on performance
% under some implementations of S/SL.
Scan :
        {[
            | lBlank :
            | lLetter:
                oBufferSave
                @Identifier
            | lNewLine:
                .pNewLine
            | lCarriageReturn:
                % from Windows files, ignore
            | lTab:
            | ';':
                .pSemicolon
	    %Changed the comment style in the following case statement
            | '/':	%New symbol for entrance into a comment	
                [
                    | '/':	%Standard one line comment is now started with //
			@Comment
		    | '*':	%Alternate block comments are now started with /*
                        @AlternateComment
                    | *:
                        .pSlash	%If there's no comment output pSlash token
                ]
            | ')':
                .pRightParen
            | '[':
                .pLeftBracket
            | ']':
                .pRightBracket
            | ',':
                .pComma
            | ':':
                [
                    | '=':
                        .pColonEquals
                    | *:
                        .pColon
                ]
            | lDigit:
                oBufferSave
                @Integer
                [
                    | lLetter:
                        #eNoSeparator
                        oBufferSave
                        @Identifier
                    | *:
                ]
            | '=':
                .pEquals
            | '+':
                .pPlus
            | lQuote:
                @StringLiteral
            | '-':
                .pMinus
            | '.':
                .pDot
            | '<':
                [
                    | '>':
                        .pNotEqual
                    | '=':
                        .pLessEqual
                    | *:
                        .pLess
                ]
            | '>':
                [
                    | '=':
                        .pGreaterEqual
                    | *:
                        .pGreater
                ]
            | '*':
                .pStar
            | lNewPage:
            | lEndFile:
                .pEndFile
                >
            | *:
                ?
                #eIllegalChar
        ]};

Identifier :
        % Assemble an identifier token

        {[
            | lLetter, lDigit:
                oBufferSave
            | *:
                .pIdentifier
                >
        ]};

Integer :
        % Assemble an integer token

        {[
            | lDigit:
                oBufferSave
            | *:
                .pInteger
                >
        ]};

StringLiteral :
        % Assemble a literal string token

        {[
            | lQuote:
                [
                    | lQuote:
                        oBufferSave
                    | *:
                        .pStringLiteral
                        >
                ]
            | lNewLine:         % literal must not cross a line boundary
                #eStringLiteralLine
                .pNewLine
                >
            | lEndFile:         % literal must be closed before EOF
                #eStringLiteralEOF
                .pEndFile
                >
            | *:        % literal may contain any other character
                [
                    | lBackslash:
                        oBufferSave
                    | *:
                ]
                ?
                oBufferSave
        ]};

Comment :
        % Discard the contents of a comment

        {[
            | lNewLine:
                .pNewLine
		>
            | lEndFile:         % comment must be closed before EOF
                #eCommentEOF
                .pEndFile
                >
            | *:        % comment may contain any other character
                ?
        ]};

AlternateComment :
        {[
            | '*':
                [
                    | '/':	%New style for block comment closing added
                        >
                    | *:
                ]
            | lNewLine:
                .pNewLine
            | lEndFile:
                #eCommentEOF
                .pEndFile
                >
            | *:
                ?
        ]};

end
