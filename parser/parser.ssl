%  PT Parser.ssl        Ver. 4.2
%
% Date:  30 Jun 1980
%        (Revised v4.2 - 18 Dec 2019)
%
% Author:  Alan Rosselet
%
% Abstract
%
%     This module parses the syntax token stream emitted by the scanner
%   and emits a postfix stream of tokens to the semantic analyzer
%   module.  The parser detects and repairs syntax errors so that the
%   token stream emitted to the semantic analyzer is syntactically
%   legal (except for the special case of declaration phase errors - see
%   comment in the Block routine below).

Input :
        % Keywords must be first both here and in stdIdentifiers,
        % and they must appear in the exact same order
        
        pMod		 'mod'  % mod keyword added
        firstKeywordToken = pMod % first keyword token updated to pMod
        pPub		 'pub'  % pub keyword added
        pMain        'main' % main keyword added
        pLet		 'let'  % let keyword added
        pMut		 'mut'  % mut keyword added
        pFn		     'fn'   % fn keyword added
	pLoop		 'loop' % loop keyword added
	pBreak		 'break' % break keyword added
	pMatch		 'match' % match keyword added
        pElse        'else'
        pOf          'of'
        pFile        'file'
        pConst       'const'
        pType        'type'
        pIf          'if'
        pWhile       'while'
        lastKeywordToken = pWhile % last keyword token modifed to pWhile

        % Compound tokens - 
        %   These will be sent to the parser with a value or index.
        pIdentifier 
        firstCompoundInputToken = pIdentifier
        pInteger
        pStringLiteral
        lastCompoundInputToken = pStringLiteral

        % Non-compound tokens - 
        %   These tokens simply represent themselves.
        pNewLine
        pEndFile
        pPlus                   '+'
        pMinus                  '-'
        pStar                   '*'
        %ColonEquals input token removed
        pDot                    '.'
        pComma                  ','
        pSemicolon              ';'
        pColon                  ':'
        pSlash                  '/'     %Slash input token added
        pPercent                '%'     %Percent input token added
        pOrBar                  '|'
        pNot                    '!'     %Not output input added
        pUnderscore             '_'     %Underscore input token added
        pQuestionMark           '?'     %Question mark input token added
        pDoubleAmpersand        '&&'    %DoubleAmpersand input token added
        pDoubleOrBar            '||'    %Double or bar input token added
        pEquals                 '='
        pDoubleEquals           '=='    %DoubleEquals input token added
        pPlusEquals             '+='    %PlusEquals input token added
        pMinusEquals            '-='    %MinusEquals input token added
        pEqualGreater           '=>'
        pNotEqual               '!='
        pLess                   '<'
        pLessEqual              '<='
        pGreaterEqual           '>='
        pGreater                '>'
        pLeftParen              '('
        pRightParen             ')'
        pRightBrace             '}'     %RightBrace input token added
        pLeftBrace              '{'     %LeftBrace input token added
        pLeftBracket            '['
        pRightBracket           ']'
        lastSyntaxToken = pRightBracket;

Output :
        sIdentifier 
        firstSemanticToken = sIdentifier
        firstCompoundSemanticToken = sIdentifier
        sInteger
        sStringLiteral
        lastCompoundSemanticToken = sStringLiteral

        sProgram
        sParmBegin
        sParmEnd
        sConst
        sType
        sVar
        sProcedure
        sBegin
        sEnd
        sNegate
        sModule         %Added QUST Module output
        sPublic         %Added QUST Module output
		sMutable        %Added QUST variable output token
		sInitialValue   %Added QUST variable output token
		sArray
		sFile
		sRange
		sCaseStmt
		sCaseOtherwise   %added QUST case alternative token
		sCaseEnd
		sLabelEnd
		sExpnEnd
		sNullStmt
		sAssignmentStmt
		sSubscript
		sCallStmt
		sFieldWidth
		sIfStmt
		sThen
		sElse
		sWhileStmt
		%Removed PT tokens RepeatStmt and RepeatEnd
		sLoopStmt       %added QUST output token
		sLoopBreakIf    %added QUST output token
		sLoopEnd        %added QUST output token
		sEq
		sNE
		sLT
		sLE
		sGT
		sGE
		sAdd
		sSubtract
		sMultiply
		sDivide
		sModulus
		sInfixOr
		sOr
		sInfixAnd
		sSubstring      %Added QUST string operation
		SLength         %Added QUST string operation
		sAnd
		sNot
		sNewLine
		sEndOfFile
		lastSemanticToken = sEndOfFile;

	rules

	Program :
		pMod  
		'main' %program/module name
		.sProgram
		'(' 
		{[
			| pIdentifier :
				.sIdentifier
				[
					| ',':
					| *:
						>
				]
			| *:
				>
		]
		}
		')'
		.sParmEnd
		'{'
		@Block;

	Block :
		% Strictly speaking, standard Pascal requires that declarations
		% appear only in the order consts, types, vars, procedures.
		% We allow arbitrary intermixing of these instead to preserve
		% programmer sanity.
		.sBegin
		{[                   %%TODO: Re-order case block for expected occurance
		| '}':
		    >
		| 'const':
		    .sConst
		    @ConstantDefinitions
		| 'type':
		    .sType
		   @TypeDefinitions
		| 'let':
		    .sVar
		    @VariableDeclarations
		| 'fn':
		    .sProcedure
		    % routine name
		    pIdentifier  .sIdentifier
		    @ProcedureHeading
		| 'pub':
		    'fn'
		    .sProcedure
		    % routine name
		    pIdentifier .sIdentifier
		    .sPublic
		    @ProcedureHeading
		| pIdentifier:
		    %@AssignmentOrCallStmt
		| pIf:
		    @IfStmt
		| pLoop:    
		    %@LoopStmt        
		| pMatch:
		    @MatchStmt
		| pWhile:
		    @WhileStmt
		| pMod:         %This expects that we don't have nested programs
		    .sModule
		    %module name
		    .sIdentifier
		    '{'
		    @Block
		]}
		.sEnd;
	ConstantDefinitions :
		% Accept one or more named constant definitions
		pIdentifier  .sIdentifier
		'=' @ConstantValue %--- remove ';' and place ',' into loop choice 
		{[
		    |',':
		       pIdentifier
			.sIdentifier
			'=' @ConstantValue
		    | * :
			';' %--- force match semi-colon for last const variable declaration
			    %--- else throws error
			>
		]};

	ConstantValue :
		[
		    | pInteger:
			.sInteger
		    | pIdentifier:
			.sIdentifier
		    | '-':
			@UnsignedIntegerConstant
			.sNegate
		    | '+':
			@UnsignedIntegerConstant
		    | pStringLiteral:
			.sStringLiteral
		];

	UnsignedIntegerConstant :
		[
		    | pIdentifier:
			.sIdentifier
		    | pInteger:
			.sInteger
		];

	TypeDefinitions :
		% Type can only accept one definition per call
		pIdentifier  .sIdentifier
		'='  @TypeBody  ';'
		; % end of type definition
		
		%--- following loop choice block is removed
		%---{[ 
		%---    | pIdentifier:
		%---        .sIdentifier
		%---        '='  @TypeBody  ';'
		%---    | *:
		%---        >
		%---]};

	TypeBody :
		[
		%---remove '..' choice and add '[ : ]' for array range
		    |'[':   %  'array': 
			.sArray
			@SimpleType
			']'
		    | 'file':
			.sFile
			'of'  @SimpleType
		    | *:
			@SimpleType
		];

	SimpleType :
		% A simple type is a named type (possibly predefined)
		% or a subrange type specification
		[
		    | pIdentifier:
			.sIdentifier
			[
			    | ':': %---changed '..' to ':'
				.sRange         %% this may be unnecessary
				@OptionallySignedIntegerConstant
			    | *:
			]
		    | *:
		%--- removed no longer valid beg .. end range dec
			%---@OptionallySignedIntegerConstant
			%---    '..'  .sRange
			%---@OptionallySignedIntegerConstant
		];

	OptionallySignedIntegerConstant :
		[
		    | '-':
			@UnsignedIntegerConstant
			.sNegate
		    | '+':
			@UnsignedIntegerConstant
		    | *:
			@UnsignedIntegerConstant
		];

VariableDeclarations :
	% Accept one or more variable declarations.
	{[
        % Accept mutable variables
        | pMut:
            pIdentifier  .sIdentifier
            {[
                |':':
					@TypeBody
				|'=':
					.sInitialValue
                    @Expression
                    .sExpnEnd
				|',':
					>
				|*:
					>
            ]}
			.sMutable
		|';':
			>
        % Accept immutable variables
        | *:
			pIdentifier  .sIdentifier
            {[
                |':':
					@TypeBody
				|'=':
					.sInitialValue
                    @Expression
                    .sExpnEnd
				|',':
					>
				|*:
					>
            ]}
    ]};

ProcedureHeading :
	% This is the routine handling section (PT procedure, or Qust functions) 
	% Accept zero or more procedure formal parameter declarations.
	'('
	[
		|')':
		|*:
			{
				% formal parameter identifier
				[
					| 'mut':
						pIdentifier  .sIdentifier
						%type identifier
						':'
							pIdentifier .sIdentifier
						.sMutable
					| pIdentifier:
						.sIdentifier
						%type identifier
						':'
							pIdentifier .sIdentifier
					| *:
						%Need an illegal toekn to throw here	
				]
				%check if we have more params or not
				[
					| ',':
					| *:
						>
				]
			}
		')'
	]
	.sParmEnd
	'{'
	@Block;

%Statement : %Don't need
%        [
%            | pIdentifier:
%                @AssignmentOrCallStmt
%            | '{': % Change to Qust statement form
%                @BeginStmt
%            | 'if':
%                @IfStmt
%            | 'while':
%                @WhileStmt
%            | 'case':
%                @CaseStmt
%            | 'loop': % Change to Qust general loop statement
%                @RepeatStmt
%            | *:
%                .sNullStmt
%        ];
%
AssignmentOrCallStmt :
        [
            | '=': %Changed to Qust Standard Operator
                .sAssignmentStmt
                .sIdentifier    % identifier accepted in the Statement rule
                @Expression
                .sExpnEnd
            | '[':
                .sAssignmentStmt
                .sIdentifier
                .sSubscript
                @Expression
                .sExpnEnd
                ']'  '=' %changedd to Qust Standard operator
                @Expression
                .sExpnEnd
            | *:
                @CallStmt
        ];
CallStmt :
        .sCallStmt
        .sIdentifier    % procedure identifier accepted in the Statement rule
        % accept zero or more actual parameters
        [
            | '(':
                {
                    @Expression
                    .sExpnEnd
                    % allow a field width specification to occur in calls
                    % to the standard procedures write and writeln
                    [
                        | ':':
                            .sFieldWidth
                            @Expression
                            .sExpnEnd
                        | *:
                    ]
                    [
                        | ',':
                        | *:
                            >
                    ]
                }
                ')'
            | *:        % no actual parameters
        ]
        .sParmEnd;

%BeginStmt : %Don't need
%        .sBegin
%        {
%            @Statement
%            [
%                | ';':
%                | '}': %Changed to Qust end statement form
%                    .sEnd
%                    >
%            ]
%        };
%
IfStmt :
        .sIfStmt
        @Expression
        .sExpnEnd
        %'then'  .sThen %commenting this out
        '{'
        @Block
        [
            | 'else': 
                    [
                    |'if':
                        @IfStmt
                    |'{':
                       .sElse
                       @Block
                    ]
            | *:
        ];


WhileStmt :
        .sWhileStmt
        @Expression
        .sExpnEnd
        '{'
        %'do' Commenting this out, not necessary
        @Block;

MatchStmt :
        .sCaseStmt
        @Expression
        .sExpnEnd
        '{'
        @MatchAlternative
        {[
	    | '}':
		>
	    | *:
		@MatchAlternative
        ]}
        .sCaseEnd;

MatchAlternative :
        % A case alternative is a statement labelled by
        % one or more optionally signed integer constants
	'|'
	[ 
	    |'_':
		    .sCaseOtherwise 
		    '=>' '{' @Block
	    |*:
		{
		    @OptionallySignedIntegerConstant
		    [
			| '|':
			| *:
			    >
		    ]
		}
		.sLabelEnd
		'=>' '{'  @Block 
	];


%RepeatStmt :
%        .sRepeatStmt
%        {
%            @Statement
%            [
%                | ';':
%                | 'until':
%                    .sRepeatEnd
%                    >
%            ]
%        }
%        @Expression
%        .sExpnEnd;
%
Expression :
        @SimpleExpression
        [
            | '==': %Changed to Qust Operator
                @SimpleExpression  .sEq
            | '!=': %Changed to Qust Operator

                @SimpleExpression  .sNE
            | '<':
                @SimpleExpression  .sLT
            | '<=':
                @SimpleExpression  .sLE
            | '>':
                @SimpleExpression  .sGT
            | '>=':
                @SimpleExpression  .sGE
            | *:
        ];

SimpleExpression :
        [
            | '+':
                @Term
            | '-':
                @Term  .sNegate
            | *:
                @Term
        ]
        {[
            | '+':
                @Term  .sAdd
            | '-':
                @Term  .sSubtract
            | '||': %Changed to Qust Or

                .sInfixOr  @Term  .sOr
            | *:
                >
        ]};

Term :
        @Factor
        {[
            | '*':
                @Factor  .sMultiply
            | '/': %Changed to Qust Div
                @Factor  .sDivide
            | '%': %Change to Qust mod
                @Factor  .sModulus
            | '&&': %Change to Qust And

                .sInfixAnd  @Factor  .sAnd
            | *:
                >
        ]};

Factor :
        [
            | pIdentifier:
                .sIdentifier
                @IdentifierExtension
            | pInteger:
                .sInteger
            | '(':
                @Expression  ')'
            | '!': %Changed to Qust Not

                @Factor
                .sNot
            | pStringLiteral:
                .sStringLiteral
            | 'file':
                .sFile '(' @Expression ')'
                .sExpnEnd
        ];

IdentifierExtension :
        % Handle subscripts and function actual parameter lists
        [
            | '[':
                .sSubscript
                @Expression  ']'
                .sExpnEnd
            | '(':
                .sParmBegin
                @Expression  ')'
                .sExpnEnd
                .sParmEnd
            | *:
        ];

end

